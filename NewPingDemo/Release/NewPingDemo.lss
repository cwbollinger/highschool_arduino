
NewPingDemo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000cee  00000d82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d9  0080011c  0080011c  00000d9e  2**0
                  ALLOC
  3 .debug_aranges 000005d8  00000000  00000000  00000d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000e18  00000000  00000000  00001376  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000071d5  00000000  00000000  0000218e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001531  00000000  00000000  00009363  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003500  00000000  00000000  0000a894  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a70  00000000  00000000  0000dd94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001a45  00000000  00000000  0000e804  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003f89  00000000  00000000  00010249  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000005a0  00000000  00000000  000141d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	_maxEchoTime = min(max_cm_distance, MAX_SENSOR_DISTANCE) * US_ROUNDTRIP_CM + (US_ROUNDTRIP_CM / 2); // Calculate the maximum distance in uS.

#if DISABLE_ONE_PIN == true
	*_triggerMode |= _triggerBit; // Set trigger pin to output.
#endif
}
   0:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__ctors_end>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
   c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  1c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__vector_7>
  20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  40:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <__vector_16>
  44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  48:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__vector_18>
  4c:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__vector_19>
  50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

00000068 <port_to_mode_PGM>:
  68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
  72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
  7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
  86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
  9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
  ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
  be:	00 00 00 00                                         ....

000000c2 <__ctors_start>:
  c2:	a5 01       	movw	r20, r10
  c4:	a9 03       	fmulsu	r18, r17

000000c6 <__ctors_end>:
  c6:	11 24       	eor	r1, r1
  c8:	1f be       	out	0x3f, r1	; 63
  ca:	cf ef       	ldi	r28, 0xFF	; 255
  cc:	d8 e0       	ldi	r29, 0x08	; 8
  ce:	de bf       	out	0x3e, r29	; 62
  d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_copy_data>:
  d2:	11 e0       	ldi	r17, 0x01	; 1
  d4:	a0 e0       	ldi	r26, 0x00	; 0
  d6:	b1 e0       	ldi	r27, 0x01	; 1
  d8:	ee ee       	ldi	r30, 0xEE	; 238
  da:	fc e0       	ldi	r31, 0x0C	; 12
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <.do_copy_data_start>

000000de <.do_copy_data_loop>:
  de:	05 90       	lpm	r0, Z+
  e0:	0d 92       	st	X+, r0

000000e2 <.do_copy_data_start>:
  e2:	ac 31       	cpi	r26, 0x1C	; 28
  e4:	b1 07       	cpc	r27, r17
  e6:	d9 f7       	brne	.-10     	; 0xde <.do_copy_data_loop>

000000e8 <__do_clear_bss>:
  e8:	11 e0       	ldi	r17, 0x01	; 1
  ea:	ac e1       	ldi	r26, 0x1C	; 28
  ec:	b1 e0       	ldi	r27, 0x01	; 1
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <.do_clear_bss_start>

000000f0 <.do_clear_bss_loop>:
  f0:	1d 92       	st	X+, r1

000000f2 <.do_clear_bss_start>:
  f2:	a5 3f       	cpi	r26, 0xF5	; 245
  f4:	b1 07       	cpc	r27, r17
  f6:	e1 f7       	brne	.-8      	; 0xf0 <.do_clear_bss_loop>

000000f8 <__do_global_ctors>:
  f8:	10 e0       	ldi	r17, 0x00	; 0
  fa:	c6 ec       	ldi	r28, 0xC6	; 198
  fc:	d0 e0       	ldi	r29, 0x00	; 0
  fe:	04 c0       	rjmp	.+8      	; 0x108 <.do_global_ctors_start>

00000100 <.do_global_ctors_loop>:
 100:	22 97       	sbiw	r28, 0x02	; 2
 102:	fe 01       	movw	r30, r28
 104:	0e 94 71 06 	call	0xce2	; 0xce2 <__tablejump__>

00000108 <.do_global_ctors_start>:
 108:	c2 3c       	cpi	r28, 0xC2	; 194
 10a:	d1 07       	cpc	r29, r17
 10c:	c9 f7       	brne	.-14     	; 0x100 <.do_global_ctors_loop>
 10e:	0e 94 ff 04 	call	0x9fe	; 0x9fe <main>
 112:	0c 94 75 06 	jmp	0xcea	; 0xcea <_exit>

00000116 <__bad_interrupt>:
 116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <_ZN7NewPingC1Ehhi>:

// ---------------------------------------------------------------------------
// NewPing constructor
// ---------------------------------------------------------------------------

NewPing::NewPing(uint8_t trigger_pin, uint8_t echo_pin, int max_cm_distance) {
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	ec 01       	movw	r28, r24
	_triggerBit = digitalPinToBitMask(trigger_pin); // Get the port register bitmask for the trigger pin.
 120:	86 2f       	mov	r24, r22
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	fc 01       	movw	r30, r24
 126:	e6 56       	subi	r30, 0x66	; 102
 128:	ff 4f       	sbci	r31, 0xFF	; 255
 12a:	e4 91       	lpm	r30, Z+
 12c:	ec 83       	std	Y+4, r30	; 0x04
	_echoBit = digitalPinToBitMask(echo_pin);       // Get the port register bitmask for the echo pin.
 12e:	a4 2f       	mov	r26, r20
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	fd 01       	movw	r30, r26
 134:	e6 56       	subi	r30, 0x66	; 102
 136:	ff 4f       	sbci	r31, 0xFF	; 255
 138:	e4 91       	lpm	r30, Z+
 13a:	ed 83       	std	Y+5, r30	; 0x05

	_triggerOutput = portOutputRegister(digitalPinToPort(trigger_pin)); // Get the output port register for the trigger pin.
 13c:	8a 57       	subi	r24, 0x7A	; 122
 13e:	9f 4f       	sbci	r25, 0xFF	; 255
 140:	fc 01       	movw	r30, r24
 142:	44 91       	lpm	r20, Z+
 144:	50 e0       	ldi	r21, 0x00	; 0
 146:	44 0f       	add	r20, r20
 148:	55 1f       	adc	r21, r21
 14a:	fa 01       	movw	r30, r20
 14c:	ee 58       	subi	r30, 0x8E	; 142
 14e:	ff 4f       	sbci	r31, 0xFF	; 255
 150:	85 91       	lpm	r24, Z+
 152:	94 91       	lpm	r25, Z+
 154:	9f 83       	std	Y+7, r25	; 0x07
 156:	8e 83       	std	Y+6, r24	; 0x06
	_echoInput = portInputRegister(digitalPinToPort(echo_pin));         // Get the input port register for the echo pin.
 158:	aa 57       	subi	r26, 0x7A	; 122
 15a:	bf 4f       	sbci	r27, 0xFF	; 255
 15c:	fd 01       	movw	r30, r26
 15e:	84 91       	lpm	r24, Z+
 160:	e8 2f       	mov	r30, r24
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	ee 0f       	add	r30, r30
 166:	ff 1f       	adc	r31, r31
 168:	e4 58       	subi	r30, 0x84	; 132
 16a:	ff 4f       	sbci	r31, 0xFF	; 255
 16c:	85 91       	lpm	r24, Z+
 16e:	94 91       	lpm	r25, Z+
 170:	9b 87       	std	Y+11, r25	; 0x0b
 172:	8a 87       	std	Y+10, r24	; 0x0a

	_triggerMode = (uint8_t *) portModeRegister(digitalPinToPort(trigger_pin)); // Get the port mode register for the trigger pin.
 174:	fa 01       	movw	r30, r20
 176:	e8 59       	subi	r30, 0x98	; 152
 178:	ff 4f       	sbci	r31, 0xFF	; 255
 17a:	85 91       	lpm	r24, Z+
 17c:	94 91       	lpm	r25, Z+
 17e:	99 87       	std	Y+9, r25	; 0x09
 180:	88 87       	std	Y+8, r24	; 0x08

	_maxEchoTime = min(max_cm_distance, MAX_SENSOR_DISTANCE) * US_ROUNDTRIP_CM + (US_ROUNDTRIP_CM / 2); // Calculate the maximum distance in uS.
 182:	f1 e0       	ldi	r31, 0x01	; 1
 184:	25 3f       	cpi	r18, 0xF5	; 245
 186:	3f 07       	cpc	r19, r31
 188:	14 f0       	brlt	.+4      	; 0x18e <_ZN7NewPingC1Ehhi+0x74>
 18a:	24 ef       	ldi	r18, 0xF4	; 244
 18c:	31 e0       	ldi	r19, 0x01	; 1
 18e:	89 e3       	ldi	r24, 0x39	; 57
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	ac 01       	movw	r20, r24
 194:	24 9f       	mul	r18, r20
 196:	c0 01       	movw	r24, r0
 198:	25 9f       	mul	r18, r21
 19a:	90 0d       	add	r25, r0
 19c:	34 9f       	mul	r19, r20
 19e:	90 0d       	add	r25, r0
 1a0:	11 24       	eor	r1, r1
 1a2:	4c 96       	adiw	r24, 0x1c	; 28
 1a4:	9d 87       	std	Y+13, r25	; 0x0d
 1a6:	8c 87       	std	Y+12, r24	; 0x0c

#if DISABLE_ONE_PIN == true
	*_triggerMode |= _triggerBit; // Set trigger pin to output.
#endif
}
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <__vector_7>:


#if defined (__AVR_ATmega32U4__) // Use Timer4 for ATmega32U4 (Teensy/Leonardo).
ISR(TIMER4_OVF_vect) {
#else
ISR(TIMER2_COMPA_vect) {
 1ae:	1f 92       	push	r1
 1b0:	0f 92       	push	r0
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	0f 92       	push	r0
 1b6:	11 24       	eor	r1, r1
 1b8:	2f 93       	push	r18
 1ba:	3f 93       	push	r19
 1bc:	4f 93       	push	r20
 1be:	5f 93       	push	r21
 1c0:	6f 93       	push	r22
 1c2:	7f 93       	push	r23
 1c4:	8f 93       	push	r24
 1c6:	9f 93       	push	r25
 1c8:	af 93       	push	r26
 1ca:	bf 93       	push	r27
 1cc:	ef 93       	push	r30
 1ce:	ff 93       	push	r31
#endif
	if(intFunc) intFunc(); // If wrapped function is set, call it.
 1d0:	e0 91 1c 01 	lds	r30, 0x011C
 1d4:	f0 91 1d 01 	lds	r31, 0x011D
 1d8:	30 97       	sbiw	r30, 0x00	; 0
 1da:	09 f0       	breq	.+2      	; 0x1de <__vector_7+0x30>
 1dc:	09 95       	icall
}
 1de:	ff 91       	pop	r31
 1e0:	ef 91       	pop	r30
 1e2:	bf 91       	pop	r27
 1e4:	af 91       	pop	r26
 1e6:	9f 91       	pop	r25
 1e8:	8f 91       	pop	r24
 1ea:	7f 91       	pop	r23
 1ec:	6f 91       	pop	r22
 1ee:	5f 91       	pop	r21
 1f0:	4f 91       	pop	r20
 1f2:	3f 91       	pop	r19
 1f4:	2f 91       	pop	r18
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <_ZN7NewPing12ping_triggerEv>:

// ---------------------------------------------------------------------------
// Standard ping method support functions (not called directly)
// ---------------------------------------------------------------------------

boolean NewPing::ping_trigger() {
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	ec 01       	movw	r28, r24
#if DISABLE_ONE_PIN != true
	*_triggerMode |= _triggerBit;    // Set trigger pin to output.
 206:	e8 85       	ldd	r30, Y+8	; 0x08
 208:	f9 85       	ldd	r31, Y+9	; 0x09
 20a:	80 81       	ld	r24, Z
 20c:	9c 81       	ldd	r25, Y+4	; 0x04
 20e:	89 2b       	or	r24, r25
 210:	80 83       	st	Z, r24
#endif
	*_triggerOutput &= ~_triggerBit; // Set the trigger pin low, should already be low, but this will make sure it is.
 212:	ee 81       	ldd	r30, Y+6	; 0x06
 214:	ff 81       	ldd	r31, Y+7	; 0x07
 216:	90 81       	ld	r25, Z
 218:	8c 81       	ldd	r24, Y+4	; 0x04
 21a:	80 95       	com	r24
 21c:	89 23       	and	r24, r25
 21e:	80 83       	st	Z, r24
	delayMicroseconds(4);            // Wait for pin to go low, testing shows it needs 4uS to work every time.
 220:	84 e0       	ldi	r24, 0x04	; 4
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 d5 05 	call	0xbaa	; 0xbaa <delayMicroseconds>
	*_triggerOutput |= _triggerBit;  // Set trigger pin high, this tells the sensor to send out a ping.
 228:	ee 81       	ldd	r30, Y+6	; 0x06
 22a:	ff 81       	ldd	r31, Y+7	; 0x07
 22c:	80 81       	ld	r24, Z
 22e:	9c 81       	ldd	r25, Y+4	; 0x04
 230:	89 2b       	or	r24, r25
 232:	80 83       	st	Z, r24
	delayMicroseconds(10);           // Wait long enough for the sensor to realize the trigger pin is high. Sensor specs say to wait 10uS.
 234:	8a e0       	ldi	r24, 0x0A	; 10
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 d5 05 	call	0xbaa	; 0xbaa <delayMicroseconds>
	*_triggerOutput &= ~_triggerBit; // Set trigger pin back to low.
 23c:	ee 81       	ldd	r30, Y+6	; 0x06
 23e:	ff 81       	ldd	r31, Y+7	; 0x07
 240:	90 81       	ld	r25, Z
 242:	8c 81       	ldd	r24, Y+4	; 0x04
 244:	80 95       	com	r24
 246:	89 23       	and	r24, r25
 248:	80 83       	st	Z, r24
#if DISABLE_ONE_PIN != true
	*_triggerMode &= ~_triggerBit;   // Set trigger pin to input (when using one Arduino pin this is technically setting the echo pin to input as both are tied to the same Arduino pin).
 24a:	e8 85       	ldd	r30, Y+8	; 0x08
 24c:	f9 85       	ldd	r31, Y+9	; 0x09
 24e:	90 81       	ld	r25, Z
 250:	8c 81       	ldd	r24, Y+4	; 0x04
 252:	80 95       	com	r24
 254:	89 23       	and	r24, r25
 256:	80 83       	st	Z, r24
#endif

	_max_time =  micros() + MAX_SENSOR_DELAY;                  // Set a timeout for the ping to trigger.
 258:	0e 94 56 05 	call	0xaac	; 0xaac <micros>
 25c:	60 5b       	subi	r22, 0xB0	; 176
 25e:	79 4b       	sbci	r23, 0xB9	; 185
 260:	8f 4f       	sbci	r24, 0xFF	; 255
 262:	9f 4f       	sbci	r25, 0xFF	; 255
 264:	6e 87       	std	Y+14, r22	; 0x0e
 266:	7f 87       	std	Y+15, r23	; 0x0f
 268:	88 8b       	std	Y+16, r24	; 0x10
 26a:	99 8b       	std	Y+17, r25	; 0x11
	while ((*_echoInput & _echoBit) && micros() <= _max_time) {} // Wait for echo pin to clear.
 26c:	ea 85       	ldd	r30, Y+10	; 0x0a
 26e:	fb 85       	ldd	r31, Y+11	; 0x0b
 270:	20 81       	ld	r18, Z
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	8d 81       	ldd	r24, Y+5	; 0x05
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	28 23       	and	r18, r24
 27a:	39 23       	and	r19, r25
 27c:	23 2b       	or	r18, r19
 27e:	c9 f0       	breq	.+50     	; 0x2b2 <_ZN7NewPing12ping_triggerEv+0xb2>
 280:	0e 94 56 05 	call	0xaac	; 0xaac <micros>
 284:	2e 85       	ldd	r18, Y+14	; 0x0e
 286:	3f 85       	ldd	r19, Y+15	; 0x0f
 288:	48 89       	ldd	r20, Y+16	; 0x10
 28a:	59 89       	ldd	r21, Y+17	; 0x11
 28c:	26 17       	cp	r18, r22
 28e:	37 07       	cpc	r19, r23
 290:	48 07       	cpc	r20, r24
 292:	59 07       	cpc	r21, r25
 294:	70 f0       	brcs	.+28     	; 0x2b2 <_ZN7NewPing12ping_triggerEv+0xb2>
 296:	ea cf       	rjmp	.-44     	; 0x26c <_ZN7NewPing12ping_triggerEv+0x6c>
	while (!(*_echoInput & _echoBit))                          // Wait for ping to start.
		if (micros() > _max_time) return false;                // Something went wrong, abort.
 298:	0e 94 56 05 	call	0xaac	; 0xaac <micros>
 29c:	2e 85       	ldd	r18, Y+14	; 0x0e
 29e:	3f 85       	ldd	r19, Y+15	; 0x0f
 2a0:	48 89       	ldd	r20, Y+16	; 0x10
 2a2:	59 89       	ldd	r21, Y+17	; 0x11
 2a4:	26 17       	cp	r18, r22
 2a6:	37 07       	cpc	r19, r23
 2a8:	48 07       	cpc	r20, r24
 2aa:	59 07       	cpc	r21, r25
 2ac:	10 f4       	brcc	.+4      	; 0x2b2 <_ZN7NewPing12ping_triggerEv+0xb2>
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	19 c0       	rjmp	.+50     	; 0x2e4 <_ZN7NewPing12ping_triggerEv+0xe4>
	*_triggerMode &= ~_triggerBit;   // Set trigger pin to input (when using one Arduino pin this is technically setting the echo pin to input as both are tied to the same Arduino pin).
#endif

	_max_time =  micros() + MAX_SENSOR_DELAY;                  // Set a timeout for the ping to trigger.
	while ((*_echoInput & _echoBit) && micros() <= _max_time) {} // Wait for echo pin to clear.
	while (!(*_echoInput & _echoBit))                          // Wait for ping to start.
 2b2:	ea 85       	ldd	r30, Y+10	; 0x0a
 2b4:	fb 85       	ldd	r31, Y+11	; 0x0b
 2b6:	20 81       	ld	r18, Z
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	8d 81       	ldd	r24, Y+5	; 0x05
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	28 23       	and	r18, r24
 2c0:	39 23       	and	r19, r25
 2c2:	23 2b       	or	r18, r19
 2c4:	49 f3       	breq	.-46     	; 0x298 <_ZN7NewPing12ping_triggerEv+0x98>
		if (micros() > _max_time) return false;                // Something went wrong, abort.

	_max_time = micros() + _maxEchoTime; // Ping started, set the timeout.
 2c6:	0e 94 56 05 	call	0xaac	; 0xaac <micros>
 2ca:	2c 85       	ldd	r18, Y+12	; 0x0c
 2cc:	3d 85       	ldd	r19, Y+13	; 0x0d
 2ce:	40 e0       	ldi	r20, 0x00	; 0
 2d0:	50 e0       	ldi	r21, 0x00	; 0
 2d2:	26 0f       	add	r18, r22
 2d4:	37 1f       	adc	r19, r23
 2d6:	48 1f       	adc	r20, r24
 2d8:	59 1f       	adc	r21, r25
 2da:	2e 87       	std	Y+14, r18	; 0x0e
 2dc:	3f 87       	std	Y+15, r19	; 0x0f
 2de:	48 8b       	std	Y+16, r20	; 0x10
 2e0:	59 8b       	std	Y+17, r21	; 0x11
 2e2:	81 e0       	ldi	r24, 0x01	; 1
	return true;                         // Ping started successfully.
}
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <_ZN7NewPing4pingEv>:

// ---------------------------------------------------------------------------
// Standard ping methods
// ---------------------------------------------------------------------------

unsigned int NewPing::ping() {
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	ec 01       	movw	r28, r24
	if (!ping_trigger()) return NO_ECHO;                // Trigger a ping, if it returns false, return NO_ECHO to the calling function.
 2f0:	0e 94 00 01 	call	0x200	; 0x200 <_ZN7NewPing12ping_triggerEv>
 2f4:	88 23       	and	r24, r24
 2f6:	61 f4       	brne	.+24     	; 0x310 <_ZN7NewPing4pingEv+0x26>
 2f8:	22 c0       	rjmp	.+68     	; 0x33e <_ZN7NewPing4pingEv+0x54>
	while (*_echoInput & _echoBit)                      // Wait for the ping echo.
		if (micros() > _max_time) return NO_ECHO;       // Stop the loop and return NO_ECHO (false) if we're beyond the set maximum distance.
 2fa:	0e 94 56 05 	call	0xaac	; 0xaac <micros>
 2fe:	2e 85       	ldd	r18, Y+14	; 0x0e
 300:	3f 85       	ldd	r19, Y+15	; 0x0f
 302:	48 89       	ldd	r20, Y+16	; 0x10
 304:	59 89       	ldd	r21, Y+17	; 0x11
 306:	26 17       	cp	r18, r22
 308:	37 07       	cpc	r19, r23
 30a:	48 07       	cpc	r20, r24
 30c:	59 07       	cpc	r21, r25
 30e:	b8 f0       	brcs	.+46     	; 0x33e <_ZN7NewPing4pingEv+0x54>
// Standard ping methods
// ---------------------------------------------------------------------------

unsigned int NewPing::ping() {
	if (!ping_trigger()) return NO_ECHO;                // Trigger a ping, if it returns false, return NO_ECHO to the calling function.
	while (*_echoInput & _echoBit)                      // Wait for the ping echo.
 310:	ea 85       	ldd	r30, Y+10	; 0x0a
 312:	fb 85       	ldd	r31, Y+11	; 0x0b
 314:	20 81       	ld	r18, Z
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	8d 81       	ldd	r24, Y+5	; 0x05
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	28 23       	and	r18, r24
 31e:	39 23       	and	r19, r25
 320:	23 2b       	or	r18, r19
 322:	59 f7       	brne	.-42     	; 0x2fa <_ZN7NewPing4pingEv+0x10>
		if (micros() > _max_time) return NO_ECHO;       // Stop the loop and return NO_ECHO (false) if we're beyond the set maximum distance.
	return (micros() - (_max_time - _maxEchoTime) - 5); // Calculate ping time, 5uS of overhead.
 324:	0e 94 56 05 	call	0xaac	; 0xaac <micros>
 328:	4c 85       	ldd	r20, Y+12	; 0x0c
 32a:	5d 85       	ldd	r21, Y+13	; 0x0d
 32c:	45 50       	subi	r20, 0x05	; 5
 32e:	50 40       	sbci	r21, 0x00	; 0
 330:	2e 85       	ldd	r18, Y+14	; 0x0e
 332:	3f 85       	ldd	r19, Y+15	; 0x0f
 334:	42 1b       	sub	r20, r18
 336:	53 0b       	sbc	r21, r19
 338:	46 0f       	add	r20, r22
 33a:	57 1f       	adc	r21, r23
 33c:	02 c0       	rjmp	.+4      	; 0x342 <_ZN7NewPing4pingEv+0x58>
 33e:	40 e0       	ldi	r20, 0x00	; 0
 340:	50 e0       	ldi	r21, 0x00	; 0
}
 342:	ca 01       	movw	r24, r20
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	08 95       	ret

0000034a <_GLOBAL__I_sonar>:
#define TRIGGER_PIN  12  // Arduino pin tied to trigger pin on the ultrasonic sensor.
#define ECHO_PIN     11  // Arduino pin tied to echo pin on the ultrasonic sensor.
#define TRIGGER_PIN2  10  // Arduino pin tied to trigger pin on the ultrasonic sensor.
#define ECHO_PIN2      8  // Arduino pin tied to echo pin on the ultrasonic sensor.
#define MAX_DISTANCE 200 // Maximum distance we want to ping for (in centimeters). Maximum sensor distance is rated at 400-500cm.
NewPing sonar(TRIGGER_PIN, ECHO_PIN, MAX_DISTANCE); // NewPing setup of pins and maximum distance.
 34a:	8e e1       	ldi	r24, 0x1E	; 30
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	6c e0       	ldi	r22, 0x0C	; 12
 350:	4b e0       	ldi	r20, 0x0B	; 11
 352:	28 ec       	ldi	r18, 0xC8	; 200
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	0e 94 8d 00 	call	0x11a	; 0x11a <_ZN7NewPingC1Ehhi>
NewPing sonar2(TRIGGER_PIN2, ECHO_PIN2, MAX_DISTANCE); // NewPing setup of pins and maximum distance.
 35a:	80 e3       	ldi	r24, 0x30	; 48
 35c:	91 e0       	ldi	r25, 0x01	; 1
 35e:	6a e0       	ldi	r22, 0x0A	; 10
 360:	48 e0       	ldi	r20, 0x08	; 8
 362:	28 ec       	ldi	r18, 0xC8	; 200
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	0e 94 8d 00 	call	0x11a	; 0x11a <_ZN7NewPingC1Ehhi>
	Serial.print("Ping2: ");
	Serial.print(uS / US_ROUNDTRIP_CM);// Convert ping time to distance in cm and print result (0 = outside set distance range)
	Serial.print("cm");
#endif
	Serial.println("");
}
 36a:	08 95       	ret

0000036c <loop>:

void setup() {
	Serial.begin(115200); // Open serial monitor at 115200 baud to see ping results.
}

void loop() {
 36c:	ef 92       	push	r14
 36e:	ff 92       	push	r15
 370:	0f 93       	push	r16
 372:	1f 93       	push	r17
	Serial.print("Ping: ");
	Serial.print(uS / US_ROUNDTRIP_CM);// Convert ping time to distance in cm and print result (0 = outside set distance range)
	Serial.print("cm  ");
#endif
#if 1
	delay(100); // Wait 50ms between pings (about 20 pings/sec). 29ms should be the shortest delay between pings.
 374:	64 e6       	ldi	r22, 0x64	; 100
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <delay>
	uS = sonar2.ping();// Send ping, get ping time in microseconds (uS).
 380:	80 e3       	ldi	r24, 0x30	; 48
 382:	91 e0       	ldi	r25, 0x01	; 1
 384:	0e 94 75 01 	call	0x2ea	; 0x2ea <_ZN7NewPing4pingEv>
 388:	7c 01       	movw	r14, r24
	Serial.print("Ping2: ");
 38a:	0a ec       	ldi	r16, 0xCA	; 202
 38c:	11 e0       	ldi	r17, 0x01	; 1
 38e:	c8 01       	movw	r24, r16
 390:	60 e0       	ldi	r22, 0x00	; 0
 392:	71 e0       	ldi	r23, 0x01	; 1
 394:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <_ZN5Print5printEPKc>
	Serial.print(uS / US_ROUNDTRIP_CM);// Convert ping time to distance in cm and print result (0 = outside set distance range)
 398:	c7 01       	movw	r24, r14
 39a:	69 e3       	ldi	r22, 0x39	; 57
 39c:	70 e0       	ldi	r23, 0x00	; 0
 39e:	0e 94 39 06 	call	0xc72	; 0xc72 <__udivmodhi4>
 3a2:	c8 01       	movw	r24, r16
 3a4:	4a e0       	ldi	r20, 0x0A	; 10
 3a6:	50 e0       	ldi	r21, 0x00	; 0
 3a8:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <_ZN5Print5printEji>
	Serial.print("cm");
 3ac:	c8 01       	movw	r24, r16
 3ae:	68 e0       	ldi	r22, 0x08	; 8
 3b0:	71 e0       	ldi	r23, 0x01	; 1
 3b2:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <_ZN5Print5printEPKc>
#endif
	Serial.println("");
 3b6:	c8 01       	movw	r24, r16
 3b8:	6b e0       	ldi	r22, 0x0B	; 11
 3ba:	71 e0       	ldi	r23, 0x01	; 1
 3bc:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <_ZN5Print7printlnEPKc>
}
 3c0:	1f 91       	pop	r17
 3c2:	0f 91       	pop	r16
 3c4:	ff 90       	pop	r15
 3c6:	ef 90       	pop	r14
 3c8:	08 95       	ret

000003ca <setup>:
#define MAX_DISTANCE 200 // Maximum distance we want to ping for (in centimeters). Maximum sensor distance is rated at 400-500cm.
NewPing sonar(TRIGGER_PIN, ECHO_PIN, MAX_DISTANCE); // NewPing setup of pins and maximum distance.
NewPing sonar2(TRIGGER_PIN2, ECHO_PIN2, MAX_DISTANCE); // NewPing setup of pins and maximum distance.

void setup() {
	Serial.begin(115200); // Open serial monitor at 115200 baud to see ping results.
 3ca:	8a ec       	ldi	r24, 0xCA	; 202
 3cc:	91 e0       	ldi	r25, 0x01	; 1
 3ce:	40 e0       	ldi	r20, 0x00	; 0
 3d0:	52 ec       	ldi	r21, 0xC2	; 194
 3d2:	61 e0       	ldi	r22, 0x01	; 1
 3d4:	70 e0       	ldi	r23, 0x00	; 0
 3d6:	0e 94 78 02 	call	0x4f0	; 0x4f0 <_ZN14HardwareSerial5beginEm>
}
 3da:	08 95       	ret

000003dc <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
 3dc:	08 95       	ret

000003de <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
 3de:	1f 92       	push	r1
 3e0:	0f 92       	push	r0
 3e2:	0f b6       	in	r0, 0x3f	; 63
 3e4:	0f 92       	push	r0
 3e6:	11 24       	eor	r1, r1
 3e8:	2f 93       	push	r18
 3ea:	3f 93       	push	r19
 3ec:	4f 93       	push	r20
 3ee:	8f 93       	push	r24
 3f0:	9f 93       	push	r25
 3f2:	ef 93       	push	r30
 3f4:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
 3f6:	80 91 c0 00 	lds	r24, 0x00C0
 3fa:	82 fd       	sbrc	r24, 2
 3fc:	1d c0       	rjmp	.+58     	; 0x438 <__vector_18+0x5a>
      unsigned char c = UDR0;
 3fe:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
 402:	20 91 82 01 	lds	r18, 0x0182
 406:	30 91 83 01 	lds	r19, 0x0183

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
 40a:	2f 5f       	subi	r18, 0xFF	; 255
 40c:	3f 4f       	sbci	r19, 0xFF	; 255
 40e:	2f 73       	andi	r18, 0x3F	; 63
 410:	30 70       	andi	r19, 0x00	; 0
 412:	80 91 84 01 	lds	r24, 0x0184
 416:	90 91 85 01 	lds	r25, 0x0185
 41a:	28 17       	cp	r18, r24
 41c:	39 07       	cpc	r19, r25
 41e:	71 f0       	breq	.+28     	; 0x43c <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
 420:	e0 91 82 01 	lds	r30, 0x0182
 424:	f0 91 83 01 	lds	r31, 0x0183
 428:	ee 5b       	subi	r30, 0xBE	; 190
 42a:	fe 4f       	sbci	r31, 0xFE	; 254
 42c:	40 83       	st	Z, r20
    buffer->head = i;
 42e:	30 93 83 01 	sts	0x0183, r19
 432:	20 93 82 01 	sts	0x0182, r18
 436:	02 c0       	rjmp	.+4      	; 0x43c <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
 438:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
 43c:	ff 91       	pop	r31
 43e:	ef 91       	pop	r30
 440:	9f 91       	pop	r25
 442:	8f 91       	pop	r24
 444:	4f 91       	pop	r20
 446:	3f 91       	pop	r19
 448:	2f 91       	pop	r18
 44a:	0f 90       	pop	r0
 44c:	0f be       	out	0x3f, r0	; 63
 44e:	0f 90       	pop	r0
 450:	1f 90       	pop	r1
 452:	18 95       	reti

00000454 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
 454:	e0 91 d6 01 	lds	r30, 0x01D6
 458:	f0 91 d7 01 	lds	r31, 0x01D7
 45c:	e0 5c       	subi	r30, 0xC0	; 192
 45e:	ff 4f       	sbci	r31, 0xFF	; 255
 460:	81 91       	ld	r24, Z+
 462:	91 91       	ld	r25, Z+
 464:	20 81       	ld	r18, Z
 466:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
 468:	82 1b       	sub	r24, r18
 46a:	93 0b       	sbc	r25, r19
 46c:	8f 73       	andi	r24, 0x3F	; 63
 46e:	90 70       	andi	r25, 0x00	; 0
 470:	89 2b       	or	r24, r25
 472:	11 f0       	breq	.+4      	; 0x478 <_Z14serialEventRunv+0x24>
 474:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Z11serialEventv>
 478:	08 95       	ret

0000047a <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
 47a:	1f 92       	push	r1
 47c:	0f 92       	push	r0
 47e:	0f b6       	in	r0, 0x3f	; 63
 480:	0f 92       	push	r0
 482:	11 24       	eor	r1, r1
 484:	2f 93       	push	r18
 486:	3f 93       	push	r19
 488:	8f 93       	push	r24
 48a:	9f 93       	push	r25
 48c:	ef 93       	push	r30
 48e:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
 490:	20 91 c6 01 	lds	r18, 0x01C6
 494:	30 91 c7 01 	lds	r19, 0x01C7
 498:	80 91 c8 01 	lds	r24, 0x01C8
 49c:	90 91 c9 01 	lds	r25, 0x01C9
 4a0:	28 17       	cp	r18, r24
 4a2:	39 07       	cpc	r19, r25
 4a4:	31 f4       	brne	.+12     	; 0x4b2 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
 4a6:	80 91 c1 00 	lds	r24, 0x00C1
 4aa:	8f 7d       	andi	r24, 0xDF	; 223
 4ac:	80 93 c1 00 	sts	0x00C1, r24
 4b0:	14 c0       	rjmp	.+40     	; 0x4da <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 4b2:	e0 91 c8 01 	lds	r30, 0x01C8
 4b6:	f0 91 c9 01 	lds	r31, 0x01C9
 4ba:	ea 57       	subi	r30, 0x7A	; 122
 4bc:	fe 4f       	sbci	r31, 0xFE	; 254
 4be:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
 4c0:	80 91 c8 01 	lds	r24, 0x01C8
 4c4:	90 91 c9 01 	lds	r25, 0x01C9
 4c8:	01 96       	adiw	r24, 0x01	; 1
 4ca:	8f 73       	andi	r24, 0x3F	; 63
 4cc:	90 70       	andi	r25, 0x00	; 0
 4ce:	90 93 c9 01 	sts	0x01C9, r25
 4d2:	80 93 c8 01 	sts	0x01C8, r24
	
  #if defined(UDR0)
    UDR0 = c;
 4d6:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
 4da:	ff 91       	pop	r31
 4dc:	ef 91       	pop	r30
 4de:	9f 91       	pop	r25
 4e0:	8f 91       	pop	r24
 4e2:	3f 91       	pop	r19
 4e4:	2f 91       	pop	r18
 4e6:	0f 90       	pop	r0
 4e8:	0f be       	out	0x3f, r0	; 63
 4ea:	0f 90       	pop	r0
 4ec:	1f 90       	pop	r1
 4ee:	18 95       	reti

000004f0 <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
 4f0:	af 92       	push	r10
 4f2:	bf 92       	push	r11
 4f4:	df 92       	push	r13
 4f6:	ef 92       	push	r14
 4f8:	ff 92       	push	r15
 4fa:	0f 93       	push	r16
 4fc:	1f 93       	push	r17
 4fe:	cf 93       	push	r28
 500:	df 93       	push	r29
 502:	ec 01       	movw	r28, r24
 504:	7a 01       	movw	r14, r20
 506:	8b 01       	movw	r16, r22
 508:	dd 24       	eor	r13, r13
 50a:	40 30       	cpi	r20, 0x00	; 0
 50c:	81 ee       	ldi	r24, 0xE1	; 225
 50e:	58 07       	cpc	r21, r24
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	68 07       	cpc	r22, r24
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	78 07       	cpc	r23, r24
 518:	11 f0       	breq	.+4      	; 0x51e <_ZN14HardwareSerial5beginEm+0x2e>
 51a:	dd 24       	eor	r13, r13
 51c:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
 51e:	91 e0       	ldi	r25, 0x01	; 1
 520:	a9 2e       	mov	r10, r25
 522:	b1 2c       	mov	r11, r1
 524:	ec 89       	ldd	r30, Y+20	; 0x14
 526:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
 528:	dd 20       	and	r13, r13
 52a:	69 f0       	breq	.+26     	; 0x546 <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
 52c:	c5 01       	movw	r24, r10
 52e:	08 a0       	ldd	r0, Y+32	; 0x20
 530:	02 c0       	rjmp	.+4      	; 0x536 <_ZN14HardwareSerial5beginEm+0x46>
 532:	88 0f       	add	r24, r24
 534:	99 1f       	adc	r25, r25
 536:	0a 94       	dec	r0
 538:	e2 f7       	brpl	.-8      	; 0x532 <_ZN14HardwareSerial5beginEm+0x42>
 53a:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
 53c:	60 e0       	ldi	r22, 0x00	; 0
 53e:	79 e0       	ldi	r23, 0x09	; 9
 540:	8d e3       	ldi	r24, 0x3D	; 61
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	05 c0       	rjmp	.+10     	; 0x550 <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
 546:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 548:	60 e8       	ldi	r22, 0x80	; 128
 54a:	74 e8       	ldi	r23, 0x84	; 132
 54c:	8e e1       	ldi	r24, 0x1E	; 30
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	a8 01       	movw	r20, r16
 552:	97 01       	movw	r18, r14
 554:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__udivmodsi4>
 558:	21 50       	subi	r18, 0x01	; 1
 55a:	30 40       	sbci	r19, 0x00	; 0
 55c:	40 40       	sbci	r20, 0x00	; 0
 55e:	50 40       	sbci	r21, 0x00	; 0
 560:	56 95       	lsr	r21
 562:	47 95       	ror	r20
 564:	37 95       	ror	r19
 566:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
 568:	80 e1       	ldi	r24, 0x10	; 16
 56a:	20 30       	cpi	r18, 0x00	; 0
 56c:	38 07       	cpc	r19, r24
 56e:	20 f0       	brcs	.+8      	; 0x578 <_ZN14HardwareSerial5beginEm+0x88>
 570:	dd 20       	and	r13, r13
 572:	11 f0       	breq	.+4      	; 0x578 <_ZN14HardwareSerial5beginEm+0x88>
 574:	dd 24       	eor	r13, r13
 576:	d6 cf       	rjmp	.-84     	; 0x524 <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 578:	e8 89       	ldd	r30, Y+16	; 0x10
 57a:	f9 89       	ldd	r31, Y+17	; 0x11
 57c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 57e:	ea 89       	ldd	r30, Y+18	; 0x12
 580:	fb 89       	ldd	r31, Y+19	; 0x13
 582:	20 83       	st	Z, r18

  transmitting = false;
 584:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
 586:	ee 89       	ldd	r30, Y+22	; 0x16
 588:	ff 89       	ldd	r31, Y+23	; 0x17
 58a:	40 81       	ld	r20, Z
 58c:	21 e0       	ldi	r18, 0x01	; 1
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	c9 01       	movw	r24, r18
 592:	0c 8c       	ldd	r0, Y+28	; 0x1c
 594:	02 c0       	rjmp	.+4      	; 0x59a <_ZN14HardwareSerial5beginEm+0xaa>
 596:	88 0f       	add	r24, r24
 598:	99 1f       	adc	r25, r25
 59a:	0a 94       	dec	r0
 59c:	e2 f7       	brpl	.-8      	; 0x596 <_ZN14HardwareSerial5beginEm+0xa6>
 59e:	48 2b       	or	r20, r24
 5a0:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
 5a2:	ee 89       	ldd	r30, Y+22	; 0x16
 5a4:	ff 89       	ldd	r31, Y+23	; 0x17
 5a6:	40 81       	ld	r20, Z
 5a8:	c9 01       	movw	r24, r18
 5aa:	0d 8c       	ldd	r0, Y+29	; 0x1d
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <_ZN14HardwareSerial5beginEm+0xc2>
 5ae:	88 0f       	add	r24, r24
 5b0:	99 1f       	adc	r25, r25
 5b2:	0a 94       	dec	r0
 5b4:	e2 f7       	brpl	.-8      	; 0x5ae <_ZN14HardwareSerial5beginEm+0xbe>
 5b6:	48 2b       	or	r20, r24
 5b8:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
 5ba:	ee 89       	ldd	r30, Y+22	; 0x16
 5bc:	ff 89       	ldd	r31, Y+23	; 0x17
 5be:	40 81       	ld	r20, Z
 5c0:	c9 01       	movw	r24, r18
 5c2:	0e 8c       	ldd	r0, Y+30	; 0x1e
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <_ZN14HardwareSerial5beginEm+0xda>
 5c6:	88 0f       	add	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	0a 94       	dec	r0
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <_ZN14HardwareSerial5beginEm+0xd6>
 5ce:	48 2b       	or	r20, r24
 5d0:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
 5d2:	ee 89       	ldd	r30, Y+22	; 0x16
 5d4:	ff 89       	ldd	r31, Y+23	; 0x17
 5d6:	80 81       	ld	r24, Z
 5d8:	0f 8c       	ldd	r0, Y+31	; 0x1f
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <_ZN14HardwareSerial5beginEm+0xf0>
 5dc:	22 0f       	add	r18, r18
 5de:	33 1f       	adc	r19, r19
 5e0:	0a 94       	dec	r0
 5e2:	e2 f7       	brpl	.-8      	; 0x5dc <_ZN14HardwareSerial5beginEm+0xec>
 5e4:	20 95       	com	r18
 5e6:	28 23       	and	r18, r24
 5e8:	20 83       	st	Z, r18
}
 5ea:	df 91       	pop	r29
 5ec:	cf 91       	pop	r28
 5ee:	1f 91       	pop	r17
 5f0:	0f 91       	pop	r16
 5f2:	ff 90       	pop	r15
 5f4:	ef 90       	pop	r14
 5f6:	df 90       	pop	r13
 5f8:	bf 90       	pop	r11
 5fa:	af 90       	pop	r10
 5fc:	08 95       	ret

000005fe <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
 5fe:	dc 01       	movw	r26, r24
 600:	1c 96       	adiw	r26, 0x0c	; 12
 602:	ed 91       	ld	r30, X+
 604:	fc 91       	ld	r31, X
 606:	1d 97       	sbiw	r26, 0x0d	; 13
 608:	e0 5c       	subi	r30, 0xC0	; 192
 60a:	ff 4f       	sbci	r31, 0xFF	; 255
 60c:	21 91       	ld	r18, Z+
 60e:	31 91       	ld	r19, Z+
 610:	80 81       	ld	r24, Z
 612:	91 81       	ldd	r25, Z+1	; 0x01
 614:	28 1b       	sub	r18, r24
 616:	39 0b       	sbc	r19, r25
 618:	2f 73       	andi	r18, 0x3F	; 63
 61a:	30 70       	andi	r19, 0x00	; 0
}
 61c:	c9 01       	movw	r24, r18
 61e:	08 95       	ret

00000620 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
 620:	dc 01       	movw	r26, r24
 622:	1c 96       	adiw	r26, 0x0c	; 12
 624:	ed 91       	ld	r30, X+
 626:	fc 91       	ld	r31, X
 628:	1d 97       	sbiw	r26, 0x0d	; 13
 62a:	e0 5c       	subi	r30, 0xC0	; 192
 62c:	ff 4f       	sbci	r31, 0xFF	; 255
 62e:	20 81       	ld	r18, Z
 630:	31 81       	ldd	r19, Z+1	; 0x01
 632:	e0 54       	subi	r30, 0x40	; 64
 634:	f0 40       	sbci	r31, 0x00	; 0
 636:	df 01       	movw	r26, r30
 638:	ae 5b       	subi	r26, 0xBE	; 190
 63a:	bf 4f       	sbci	r27, 0xFF	; 255
 63c:	8d 91       	ld	r24, X+
 63e:	9c 91       	ld	r25, X
 640:	11 97       	sbiw	r26, 0x01	; 1
 642:	28 17       	cp	r18, r24
 644:	39 07       	cpc	r19, r25
 646:	19 f4       	brne	.+6      	; 0x64e <_ZN14HardwareSerial4peekEv+0x2e>
 648:	2f ef       	ldi	r18, 0xFF	; 255
 64a:	3f ef       	ldi	r19, 0xFF	; 255
 64c:	07 c0       	rjmp	.+14     	; 0x65c <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
 64e:	8d 91       	ld	r24, X+
 650:	9c 91       	ld	r25, X
 652:	e8 0f       	add	r30, r24
 654:	f9 1f       	adc	r31, r25
 656:	80 81       	ld	r24, Z
 658:	28 2f       	mov	r18, r24
 65a:	30 e0       	ldi	r19, 0x00	; 0
  }
}
 65c:	c9 01       	movw	r24, r18
 65e:	08 95       	ret

00000660 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
 660:	dc 01       	movw	r26, r24
 662:	1c 96       	adiw	r26, 0x0c	; 12
 664:	ed 91       	ld	r30, X+
 666:	fc 91       	ld	r31, X
 668:	1d 97       	sbiw	r26, 0x0d	; 13
 66a:	e0 5c       	subi	r30, 0xC0	; 192
 66c:	ff 4f       	sbci	r31, 0xFF	; 255
 66e:	20 81       	ld	r18, Z
 670:	31 81       	ldd	r19, Z+1	; 0x01
 672:	e0 54       	subi	r30, 0x40	; 64
 674:	f0 40       	sbci	r31, 0x00	; 0
 676:	df 01       	movw	r26, r30
 678:	ae 5b       	subi	r26, 0xBE	; 190
 67a:	bf 4f       	sbci	r27, 0xFF	; 255
 67c:	8d 91       	ld	r24, X+
 67e:	9c 91       	ld	r25, X
 680:	11 97       	sbiw	r26, 0x01	; 1
 682:	28 17       	cp	r18, r24
 684:	39 07       	cpc	r19, r25
 686:	19 f4       	brne	.+6      	; 0x68e <_ZN14HardwareSerial4readEv+0x2e>
 688:	2f ef       	ldi	r18, 0xFF	; 255
 68a:	3f ef       	ldi	r19, 0xFF	; 255
 68c:	10 c0       	rjmp	.+32     	; 0x6ae <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 68e:	8d 91       	ld	r24, X+
 690:	9c 91       	ld	r25, X
 692:	11 97       	sbiw	r26, 0x01	; 1
 694:	e8 0f       	add	r30, r24
 696:	f9 1f       	adc	r31, r25
 698:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
 69a:	8d 91       	ld	r24, X+
 69c:	9c 91       	ld	r25, X
 69e:	11 97       	sbiw	r26, 0x01	; 1
 6a0:	01 96       	adiw	r24, 0x01	; 1
 6a2:	8f 73       	andi	r24, 0x3F	; 63
 6a4:	90 70       	andi	r25, 0x00	; 0
 6a6:	11 96       	adiw	r26, 0x01	; 1
 6a8:	9c 93       	st	X, r25
 6aa:	8e 93       	st	-X, r24
    return c;
 6ac:	30 e0       	ldi	r19, 0x00	; 0
  }
}
 6ae:	c9 01       	movw	r24, r18
 6b0:	08 95       	ret

000006b2 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
 6b2:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
 6b4:	91 96       	adiw	r26, 0x21	; 33
 6b6:	8c 91       	ld	r24, X
 6b8:	91 97       	sbiw	r26, 0x21	; 33
 6ba:	88 23       	and	r24, r24
 6bc:	39 f0       	breq	.+14     	; 0x6cc <_ZN14HardwareSerial5flushEv+0x1a>
 6be:	54 96       	adiw	r26, 0x14	; 20
 6c0:	ed 91       	ld	r30, X+
 6c2:	fc 91       	ld	r31, X
 6c4:	55 97       	sbiw	r26, 0x15	; 21
 6c6:	80 81       	ld	r24, Z
 6c8:	86 ff       	sbrs	r24, 6
 6ca:	f9 cf       	rjmp	.-14     	; 0x6be <_ZN14HardwareSerial5flushEv+0xc>
  transmitting = false;
 6cc:	91 96       	adiw	r26, 0x21	; 33
 6ce:	1c 92       	st	X, r1
}
 6d0:	08 95       	ret

000006d2 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
 6d2:	cf 93       	push	r28
 6d4:	df 93       	push	r29
 6d6:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
 6d8:	ee 85       	ldd	r30, Y+14	; 0x0e
 6da:	ff 85       	ldd	r31, Y+15	; 0x0f
 6dc:	e0 5c       	subi	r30, 0xC0	; 192
 6de:	ff 4f       	sbci	r31, 0xFF	; 255
 6e0:	20 81       	ld	r18, Z
 6e2:	31 81       	ldd	r19, Z+1	; 0x01
 6e4:	e0 54       	subi	r30, 0x40	; 64
 6e6:	f0 40       	sbci	r31, 0x00	; 0
 6e8:	2f 5f       	subi	r18, 0xFF	; 255
 6ea:	3f 4f       	sbci	r19, 0xFF	; 255
 6ec:	2f 73       	andi	r18, 0x3F	; 63
 6ee:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
 6f0:	df 01       	movw	r26, r30
 6f2:	ae 5b       	subi	r26, 0xBE	; 190
 6f4:	bf 4f       	sbci	r27, 0xFF	; 255
 6f6:	8d 91       	ld	r24, X+
 6f8:	9c 91       	ld	r25, X
 6fa:	11 97       	sbiw	r26, 0x01	; 1
 6fc:	28 17       	cp	r18, r24
 6fe:	39 07       	cpc	r19, r25
 700:	d1 f3       	breq	.-12     	; 0x6f6 <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
 702:	e0 5c       	subi	r30, 0xC0	; 192
 704:	ff 4f       	sbci	r31, 0xFF	; 255
 706:	80 81       	ld	r24, Z
 708:	91 81       	ldd	r25, Z+1	; 0x01
 70a:	e0 54       	subi	r30, 0x40	; 64
 70c:	f0 40       	sbci	r31, 0x00	; 0
 70e:	e8 0f       	add	r30, r24
 710:	f9 1f       	adc	r31, r25
 712:	60 83       	st	Z, r22
  _tx_buffer->head = i;
 714:	ee 85       	ldd	r30, Y+14	; 0x0e
 716:	ff 85       	ldd	r31, Y+15	; 0x0f
 718:	e0 5c       	subi	r30, 0xC0	; 192
 71a:	ff 4f       	sbci	r31, 0xFF	; 255
 71c:	31 83       	std	Z+1, r19	; 0x01
 71e:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
 720:	ee 89       	ldd	r30, Y+22	; 0x16
 722:	ff 89       	ldd	r31, Y+23	; 0x17
 724:	20 81       	ld	r18, Z
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	0f 8c       	ldd	r0, Y+31	; 0x1f
 72c:	02 c0       	rjmp	.+4      	; 0x732 <_ZN14HardwareSerial5writeEh+0x60>
 72e:	88 0f       	add	r24, r24
 730:	99 1f       	adc	r25, r25
 732:	0a 94       	dec	r0
 734:	e2 f7       	brpl	.-8      	; 0x72e <_ZN14HardwareSerial5writeEh+0x5c>
 736:	28 2b       	or	r18, r24
 738:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
 73a:	81 e0       	ldi	r24, 0x01	; 1
 73c:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
 73e:	ec 89       	ldd	r30, Y+20	; 0x14
 740:	fd 89       	ldd	r31, Y+21	; 0x15
 742:	80 81       	ld	r24, Z
 744:	80 64       	ori	r24, 0x40	; 64
 746:	80 83       	st	Z, r24
  
  return 1;
}
 748:	81 e0       	ldi	r24, 0x01	; 1
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	df 91       	pop	r29
 74e:	cf 91       	pop	r28
 750:	08 95       	ret

00000752 <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 752:	10 92 cd 01 	sts	0x01CD, r1
 756:	10 92 cc 01 	sts	0x01CC, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 75a:	88 ee       	ldi	r24, 0xE8	; 232
 75c:	93 e0       	ldi	r25, 0x03	; 3
 75e:	a0 e0       	ldi	r26, 0x00	; 0
 760:	b0 e0       	ldi	r27, 0x00	; 0
 762:	80 93 ce 01 	sts	0x01CE, r24
 766:	90 93 cf 01 	sts	0x01CF, r25
 76a:	a0 93 d0 01 	sts	0x01D0, r26
 76e:	b0 93 d1 01 	sts	0x01D1, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
 772:	80 e1       	ldi	r24, 0x10	; 16
 774:	91 e0       	ldi	r25, 0x01	; 1
 776:	90 93 cb 01 	sts	0x01CB, r25
 77a:	80 93 ca 01 	sts	0x01CA, r24
{
  _rx_buffer = rx_buffer;
 77e:	82 e4       	ldi	r24, 0x42	; 66
 780:	91 e0       	ldi	r25, 0x01	; 1
 782:	90 93 d7 01 	sts	0x01D7, r25
 786:	80 93 d6 01 	sts	0x01D6, r24
  _tx_buffer = tx_buffer;
 78a:	86 e8       	ldi	r24, 0x86	; 134
 78c:	91 e0       	ldi	r25, 0x01	; 1
 78e:	90 93 d9 01 	sts	0x01D9, r25
 792:	80 93 d8 01 	sts	0x01D8, r24
  _ubrrh = ubrrh;
 796:	85 ec       	ldi	r24, 0xC5	; 197
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	90 93 db 01 	sts	0x01DB, r25
 79e:	80 93 da 01 	sts	0x01DA, r24
  _ubrrl = ubrrl;
 7a2:	84 ec       	ldi	r24, 0xC4	; 196
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	90 93 dd 01 	sts	0x01DD, r25
 7aa:	80 93 dc 01 	sts	0x01DC, r24
  _ucsra = ucsra;
 7ae:	80 ec       	ldi	r24, 0xC0	; 192
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	90 93 df 01 	sts	0x01DF, r25
 7b6:	80 93 de 01 	sts	0x01DE, r24
  _ucsrb = ucsrb;
 7ba:	81 ec       	ldi	r24, 0xC1	; 193
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	90 93 e1 01 	sts	0x01E1, r25
 7c2:	80 93 e0 01 	sts	0x01E0, r24
  _ucsrc = ucsrc;
 7c6:	82 ec       	ldi	r24, 0xC2	; 194
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	90 93 e3 01 	sts	0x01E3, r25
 7ce:	80 93 e2 01 	sts	0x01E2, r24
  _udr = udr;
 7d2:	86 ec       	ldi	r24, 0xC6	; 198
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	90 93 e5 01 	sts	0x01E5, r25
 7da:	80 93 e4 01 	sts	0x01E4, r24
  _rxen = rxen;
 7de:	84 e0       	ldi	r24, 0x04	; 4
 7e0:	80 93 e6 01 	sts	0x01E6, r24
  _txen = txen;
 7e4:	83 e0       	ldi	r24, 0x03	; 3
 7e6:	80 93 e7 01 	sts	0x01E7, r24
  _rxcie = rxcie;
 7ea:	87 e0       	ldi	r24, 0x07	; 7
 7ec:	80 93 e8 01 	sts	0x01E8, r24
  _udrie = udrie;
 7f0:	85 e0       	ldi	r24, 0x05	; 5
 7f2:	80 93 e9 01 	sts	0x01E9, r24
  _u2x = u2x;
 7f6:	81 e0       	ldi	r24, 0x01	; 1
 7f8:	80 93 ea 01 	sts	0x01EA, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
 7fc:	08 95       	ret

000007fe <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
 7fe:	cf 92       	push	r12
 800:	df 92       	push	r13
 802:	ef 92       	push	r14
 804:	ff 92       	push	r15
 806:	0f 93       	push	r16
 808:	1f 93       	push	r17
 80a:	cf 93       	push	r28
 80c:	df 93       	push	r29
 80e:	7c 01       	movw	r14, r24
 810:	6b 01       	movw	r12, r22
 812:	8a 01       	movw	r16, r20
 814:	c0 e0       	ldi	r28, 0x00	; 0
 816:	d0 e0       	ldi	r29, 0x00	; 0
 818:	0f c0       	rjmp	.+30     	; 0x838 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
 81a:	d6 01       	movw	r26, r12
 81c:	6d 91       	ld	r22, X+
 81e:	6d 01       	movw	r12, r26
 820:	d7 01       	movw	r26, r14
 822:	ed 91       	ld	r30, X+
 824:	fc 91       	ld	r31, X
 826:	01 90       	ld	r0, Z+
 828:	f0 81       	ld	r31, Z
 82a:	e0 2d       	mov	r30, r0
 82c:	c7 01       	movw	r24, r14
 82e:	09 95       	icall
 830:	c8 0f       	add	r28, r24
 832:	d9 1f       	adc	r29, r25
 834:	01 50       	subi	r16, 0x01	; 1
 836:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 838:	01 15       	cp	r16, r1
 83a:	11 05       	cpc	r17, r1
 83c:	71 f7       	brne	.-36     	; 0x81a <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
 83e:	ce 01       	movw	r24, r28
 840:	df 91       	pop	r29
 842:	cf 91       	pop	r28
 844:	1f 91       	pop	r17
 846:	0f 91       	pop	r16
 848:	ff 90       	pop	r15
 84a:	ef 90       	pop	r14
 84c:	df 90       	pop	r13
 84e:	cf 90       	pop	r12
 850:	08 95       	ret

00000852 <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
 852:	ef 92       	push	r14
 854:	ff 92       	push	r15
 856:	0f 93       	push	r16
 858:	1f 93       	push	r17
 85a:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 85c:	dc 01       	movw	r26, r24
 85e:	ed 91       	ld	r30, X+
 860:	fc 91       	ld	r31, X
 862:	01 90       	ld	r0, Z+
 864:	f0 81       	ld	r31, Z
 866:	e0 2d       	mov	r30, r0
 868:	6d e0       	ldi	r22, 0x0D	; 13
 86a:	09 95       	icall
 86c:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
 86e:	d8 01       	movw	r26, r16
 870:	ed 91       	ld	r30, X+
 872:	fc 91       	ld	r31, X
 874:	01 90       	ld	r0, Z+
 876:	f0 81       	ld	r31, Z
 878:	e0 2d       	mov	r30, r0
 87a:	c8 01       	movw	r24, r16
 87c:	6a e0       	ldi	r22, 0x0A	; 10
 87e:	09 95       	icall
 880:	9c 01       	movw	r18, r24
 882:	2e 0d       	add	r18, r14
 884:	3f 1d       	adc	r19, r15
 886:	c9 01       	movw	r24, r18
 888:	1f 91       	pop	r17
 88a:	0f 91       	pop	r16
 88c:	ff 90       	pop	r15
 88e:	ef 90       	pop	r14
 890:	08 95       	ret

00000892 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 892:	cf 93       	push	r28
 894:	df 93       	push	r29
 896:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
 898:	61 15       	cp	r22, r1
 89a:	71 05       	cpc	r23, r1
 89c:	19 f4       	brne	.+6      	; 0x8a4 <_ZN5Print5writeEPKc+0x12>
 89e:	20 e0       	ldi	r18, 0x00	; 0
 8a0:	30 e0       	ldi	r19, 0x00	; 0
 8a2:	0f c0       	rjmp	.+30     	; 0x8c2 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 8a4:	db 01       	movw	r26, r22
 8a6:	0d 90       	ld	r0, X+
 8a8:	00 20       	and	r0, r0
 8aa:	e9 f7       	brne	.-6      	; 0x8a6 <_ZN5Print5writeEPKc+0x14>
 8ac:	11 97       	sbiw	r26, 0x01	; 1
 8ae:	a6 1b       	sub	r26, r22
 8b0:	b7 0b       	sbc	r27, r23
 8b2:	e8 81       	ld	r30, Y
 8b4:	f9 81       	ldd	r31, Y+1	; 0x01
 8b6:	02 80       	ldd	r0, Z+2	; 0x02
 8b8:	f3 81       	ldd	r31, Z+3	; 0x03
 8ba:	e0 2d       	mov	r30, r0
 8bc:	ad 01       	movw	r20, r26
 8be:	09 95       	icall
 8c0:	9c 01       	movw	r18, r24
    }
 8c2:	c9 01       	movw	r24, r18
 8c4:	df 91       	pop	r29
 8c6:	cf 91       	pop	r28
 8c8:	08 95       	ret

000008ca <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8ca:	4f 92       	push	r4
 8cc:	5f 92       	push	r5
 8ce:	7f 92       	push	r7
 8d0:	8f 92       	push	r8
 8d2:	9f 92       	push	r9
 8d4:	af 92       	push	r10
 8d6:	bf 92       	push	r11
 8d8:	cf 92       	push	r12
 8da:	df 92       	push	r13
 8dc:	ef 92       	push	r14
 8de:	ff 92       	push	r15
 8e0:	0f 93       	push	r16
 8e2:	1f 93       	push	r17
 8e4:	df 93       	push	r29
 8e6:	cf 93       	push	r28
 8e8:	cd b7       	in	r28, 0x3d	; 61
 8ea:	de b7       	in	r29, 0x3e	; 62
 8ec:	a1 97       	sbiw	r28, 0x21	; 33
 8ee:	0f b6       	in	r0, 0x3f	; 63
 8f0:	f8 94       	cli
 8f2:	de bf       	out	0x3e, r29	; 62
 8f4:	0f be       	out	0x3f, r0	; 63
 8f6:	cd bf       	out	0x3d, r28	; 61
 8f8:	2c 01       	movw	r4, r24
 8fa:	74 2e       	mov	r7, r20
 8fc:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8fe:	22 30       	cpi	r18, 0x02	; 2
 900:	08 f4       	brcc	.+2      	; 0x904 <__stack+0x5>
 902:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 904:	19 a2       	std	Y+33, r1	; 0x21
 906:	31 e2       	ldi	r19, 0x21	; 33
 908:	c3 2e       	mov	r12, r19
 90a:	d1 2c       	mov	r13, r1
 90c:	cc 0e       	add	r12, r28
 90e:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 910:	82 2e       	mov	r8, r18
 912:	99 24       	eor	r9, r9
 914:	aa 24       	eor	r10, r10
 916:	bb 24       	eor	r11, r11
 918:	67 2d       	mov	r22, r7
 91a:	75 2f       	mov	r23, r21
 91c:	a5 01       	movw	r20, r10
 91e:	94 01       	movw	r18, r8
 920:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__udivmodsi4>
 924:	79 01       	movw	r14, r18
 926:	8a 01       	movw	r16, r20
    char c = m - base * n;
 928:	c8 01       	movw	r24, r16
 92a:	b7 01       	movw	r22, r14
 92c:	a5 01       	movw	r20, r10
 92e:	94 01       	movw	r18, r8
 930:	0e 94 1a 06 	call	0xc34	; 0xc34 <__mulsi3>
 934:	47 2d       	mov	r20, r7
 936:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 938:	08 94       	sec
 93a:	c1 08       	sbc	r12, r1
 93c:	d1 08       	sbc	r13, r1
 93e:	4a 30       	cpi	r20, 0x0A	; 10
 940:	14 f4       	brge	.+4      	; 0x946 <__stack+0x47>
 942:	40 5d       	subi	r20, 0xD0	; 208
 944:	01 c0       	rjmp	.+2      	; 0x948 <__stack+0x49>
 946:	49 5c       	subi	r20, 0xC9	; 201
 948:	f6 01       	movw	r30, r12
 94a:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 94c:	e1 14       	cp	r14, r1
 94e:	f1 04       	cpc	r15, r1
 950:	01 05       	cpc	r16, r1
 952:	11 05       	cpc	r17, r1
 954:	21 f0       	breq	.+8      	; 0x95e <__stack+0x5f>
 956:	7e 2c       	mov	r7, r14
 958:	5f 2d       	mov	r21, r15
 95a:	c8 01       	movw	r24, r16
 95c:	dd cf       	rjmp	.-70     	; 0x918 <__stack+0x19>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 95e:	c2 01       	movw	r24, r4
 960:	b6 01       	movw	r22, r12
 962:	0e 94 49 04 	call	0x892	; 0x892 <_ZN5Print5writeEPKc>
}
 966:	a1 96       	adiw	r28, 0x21	; 33
 968:	0f b6       	in	r0, 0x3f	; 63
 96a:	f8 94       	cli
 96c:	de bf       	out	0x3e, r29	; 62
 96e:	0f be       	out	0x3f, r0	; 63
 970:	cd bf       	out	0x3d, r28	; 61
 972:	cf 91       	pop	r28
 974:	df 91       	pop	r29
 976:	1f 91       	pop	r17
 978:	0f 91       	pop	r16
 97a:	ff 90       	pop	r15
 97c:	ef 90       	pop	r14
 97e:	df 90       	pop	r13
 980:	cf 90       	pop	r12
 982:	bf 90       	pop	r11
 984:	af 90       	pop	r10
 986:	9f 90       	pop	r9
 988:	8f 90       	pop	r8
 98a:	7f 90       	pop	r7
 98c:	5f 90       	pop	r5
 98e:	4f 90       	pop	r4
 990:	08 95       	ret

00000992 <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
 992:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
 994:	21 15       	cp	r18, r1
 996:	31 05       	cpc	r19, r1
 998:	41 f4       	brne	.+16     	; 0x9aa <_ZN5Print5printEmi+0x18>
 99a:	ed 91       	ld	r30, X+
 99c:	fc 91       	ld	r31, X
 99e:	01 90       	ld	r0, Z+
 9a0:	f0 81       	ld	r31, Z
 9a2:	e0 2d       	mov	r30, r0
 9a4:	64 2f       	mov	r22, r20
 9a6:	09 95       	icall
 9a8:	08 95       	ret
  else return printNumber(n, base);
 9aa:	0e 94 65 04 	call	0x8ca	; 0x8ca <_ZN5Print11printNumberEmh>
}
 9ae:	08 95       	ret

000009b0 <_ZN5Print5printEji>:
size_t Print::print(int n, int base)
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
 9b0:	ef 92       	push	r14
 9b2:	ff 92       	push	r15
 9b4:	0f 93       	push	r16
 9b6:	1f 93       	push	r17
 9b8:	9a 01       	movw	r18, r20
{
  return print((unsigned long) n, base);
 9ba:	7b 01       	movw	r14, r22
 9bc:	00 e0       	ldi	r16, 0x00	; 0
 9be:	10 e0       	ldi	r17, 0x00	; 0
 9c0:	b8 01       	movw	r22, r16
 9c2:	a7 01       	movw	r20, r14
 9c4:	0e 94 c9 04 	call	0x992	; 0x992 <_ZN5Print5printEmi>
}
 9c8:	1f 91       	pop	r17
 9ca:	0f 91       	pop	r16
 9cc:	ff 90       	pop	r15
 9ce:	ef 90       	pop	r14
 9d0:	08 95       	ret

000009d2 <_ZN5Print5printEPKc>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 9d2:	0e 94 49 04 	call	0x892	; 0x892 <_ZN5Print5writeEPKc>
}
 9d6:	08 95       	ret

000009d8 <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
 9d8:	ef 92       	push	r14
 9da:	ff 92       	push	r15
 9dc:	0f 93       	push	r16
 9de:	1f 93       	push	r17
 9e0:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 9e2:	0e 94 49 04 	call	0x892	; 0x892 <_ZN5Print5writeEPKc>
 9e6:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 9e8:	c7 01       	movw	r24, r14
 9ea:	0e 94 29 04 	call	0x852	; 0x852 <_ZN5Print7printlnEv>
 9ee:	08 0f       	add	r16, r24
 9f0:	19 1f       	adc	r17, r25
  return n;
}
 9f2:	c8 01       	movw	r24, r16
 9f4:	1f 91       	pop	r17
 9f6:	0f 91       	pop	r16
 9f8:	ff 90       	pop	r15
 9fa:	ef 90       	pop	r14
 9fc:	08 95       	ret

000009fe <main>:
#include <Arduino.h>

int main(void)
 9fe:	cf 93       	push	r28
 a00:	df 93       	push	r29
{
	init();
 a02:	0e 94 df 05 	call	0xbbe	; 0xbbe <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 a06:	0e 94 e5 01 	call	0x3ca	; 0x3ca <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 a0a:	ca e2       	ldi	r28, 0x2A	; 42
 a0c:	d2 e0       	ldi	r29, 0x02	; 2
#endif
	
	setup();
    
	for (;;) {
		loop();
 a0e:	0e 94 b6 01 	call	0x36c	; 0x36c <loop>
		if (serialEventRun) serialEventRun();
 a12:	20 97       	sbiw	r28, 0x00	; 0
 a14:	e1 f3       	breq	.-8      	; 0xa0e <main+0x10>
 a16:	0e 94 2a 02 	call	0x454	; 0x454 <_Z14serialEventRunv>
 a1a:	f9 cf       	rjmp	.-14     	; 0xa0e <main+0x10>

00000a1c <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
 a1c:	1f 92       	push	r1
 a1e:	0f 92       	push	r0
 a20:	0f b6       	in	r0, 0x3f	; 63
 a22:	0f 92       	push	r0
 a24:	11 24       	eor	r1, r1
 a26:	2f 93       	push	r18
 a28:	3f 93       	push	r19
 a2a:	8f 93       	push	r24
 a2c:	9f 93       	push	r25
 a2e:	af 93       	push	r26
 a30:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 a32:	80 91 f0 01 	lds	r24, 0x01F0
 a36:	90 91 f1 01 	lds	r25, 0x01F1
 a3a:	a0 91 f2 01 	lds	r26, 0x01F2
 a3e:	b0 91 f3 01 	lds	r27, 0x01F3
	unsigned char f = timer0_fract;
 a42:	30 91 f4 01 	lds	r19, 0x01F4

	m += MILLIS_INC;
 a46:	01 96       	adiw	r24, 0x01	; 1
 a48:	a1 1d       	adc	r26, r1
 a4a:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
 a4c:	23 2f       	mov	r18, r19
 a4e:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
 a50:	2d 37       	cpi	r18, 0x7D	; 125
 a52:	20 f0       	brcs	.+8      	; 0xa5c <__vector_16+0x40>
		f -= FRACT_MAX;
 a54:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
 a56:	01 96       	adiw	r24, 0x01	; 1
 a58:	a1 1d       	adc	r26, r1
 a5a:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 a5c:	20 93 f4 01 	sts	0x01F4, r18
	timer0_millis = m;
 a60:	80 93 f0 01 	sts	0x01F0, r24
 a64:	90 93 f1 01 	sts	0x01F1, r25
 a68:	a0 93 f2 01 	sts	0x01F2, r26
 a6c:	b0 93 f3 01 	sts	0x01F3, r27
	timer0_overflow_count++;
 a70:	80 91 ec 01 	lds	r24, 0x01EC
 a74:	90 91 ed 01 	lds	r25, 0x01ED
 a78:	a0 91 ee 01 	lds	r26, 0x01EE
 a7c:	b0 91 ef 01 	lds	r27, 0x01EF
 a80:	01 96       	adiw	r24, 0x01	; 1
 a82:	a1 1d       	adc	r26, r1
 a84:	b1 1d       	adc	r27, r1
 a86:	80 93 ec 01 	sts	0x01EC, r24
 a8a:	90 93 ed 01 	sts	0x01ED, r25
 a8e:	a0 93 ee 01 	sts	0x01EE, r26
 a92:	b0 93 ef 01 	sts	0x01EF, r27
}
 a96:	bf 91       	pop	r27
 a98:	af 91       	pop	r26
 a9a:	9f 91       	pop	r25
 a9c:	8f 91       	pop	r24
 a9e:	3f 91       	pop	r19
 aa0:	2f 91       	pop	r18
 aa2:	0f 90       	pop	r0
 aa4:	0f be       	out	0x3f, r0	; 63
 aa6:	0f 90       	pop	r0
 aa8:	1f 90       	pop	r1
 aaa:	18 95       	reti

00000aac <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 aac:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
 aae:	f8 94       	cli
	m = timer0_overflow_count;
 ab0:	20 91 ec 01 	lds	r18, 0x01EC
 ab4:	30 91 ed 01 	lds	r19, 0x01ED
 ab8:	40 91 ee 01 	lds	r20, 0x01EE
 abc:	50 91 ef 01 	lds	r21, 0x01EF
#if defined(TCNT0)
	t = TCNT0;
 ac0:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 ac2:	a8 9b       	sbis	0x15, 0	; 21
 ac4:	06 c0       	rjmp	.+12     	; 0xad2 <micros+0x26>
 ac6:	8f 3f       	cpi	r24, 0xFF	; 255
 ac8:	21 f0       	breq	.+8      	; 0xad2 <micros+0x26>
		m++;
 aca:	2f 5f       	subi	r18, 0xFF	; 255
 acc:	3f 4f       	sbci	r19, 0xFF	; 255
 ace:	4f 4f       	sbci	r20, 0xFF	; 255
 ad0:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 ad2:	9f bf       	out	0x3f, r25	; 63
 ad4:	54 2f       	mov	r21, r20
 ad6:	43 2f       	mov	r20, r19
 ad8:	32 2f       	mov	r19, r18
 ada:	22 27       	eor	r18, r18
 adc:	28 0f       	add	r18, r24
 ade:	31 1d       	adc	r19, r1
 ae0:	41 1d       	adc	r20, r1
 ae2:	51 1d       	adc	r21, r1
 ae4:	82 e0       	ldi	r24, 0x02	; 2
 ae6:	22 0f       	add	r18, r18
 ae8:	33 1f       	adc	r19, r19
 aea:	44 1f       	adc	r20, r20
 aec:	55 1f       	adc	r21, r21
 aee:	8a 95       	dec	r24
 af0:	d1 f7       	brne	.-12     	; 0xae6 <micros+0x3a>
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}
 af2:	b9 01       	movw	r22, r18
 af4:	ca 01       	movw	r24, r20
 af6:	08 95       	ret

00000af8 <delay>:

void delay(unsigned long ms)
{
 af8:	9b 01       	movw	r18, r22
 afa:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 afc:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
 afe:	f8 94       	cli
	m = timer0_overflow_count;
 b00:	80 91 ec 01 	lds	r24, 0x01EC
 b04:	90 91 ed 01 	lds	r25, 0x01ED
 b08:	a0 91 ee 01 	lds	r26, 0x01EE
 b0c:	b0 91 ef 01 	lds	r27, 0x01EF
#if defined(TCNT0)
	t = TCNT0;
 b10:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 b12:	a8 9b       	sbis	0x15, 0	; 21
 b14:	05 c0       	rjmp	.+10     	; 0xb20 <delay+0x28>
 b16:	6f 3f       	cpi	r22, 0xFF	; 255
 b18:	19 f0       	breq	.+6      	; 0xb20 <delay+0x28>
		m++;
 b1a:	01 96       	adiw	r24, 0x01	; 1
 b1c:	a1 1d       	adc	r26, r1
 b1e:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 b20:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
 b22:	ba 2f       	mov	r27, r26
 b24:	a9 2f       	mov	r26, r25
 b26:	98 2f       	mov	r25, r24
 b28:	88 27       	eor	r24, r24
 b2a:	86 0f       	add	r24, r22
 b2c:	91 1d       	adc	r25, r1
 b2e:	a1 1d       	adc	r26, r1
 b30:	b1 1d       	adc	r27, r1
 b32:	62 e0       	ldi	r22, 0x02	; 2
 b34:	88 0f       	add	r24, r24
 b36:	99 1f       	adc	r25, r25
 b38:	aa 1f       	adc	r26, r26
 b3a:	bb 1f       	adc	r27, r27
 b3c:	6a 95       	dec	r22
 b3e:	d1 f7       	brne	.-12     	; 0xb34 <delay+0x3c>
 b40:	bc 01       	movw	r22, r24
 b42:	2d c0       	rjmp	.+90     	; 0xb9e <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 b44:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
 b46:	f8 94       	cli
	m = timer0_overflow_count;
 b48:	80 91 ec 01 	lds	r24, 0x01EC
 b4c:	90 91 ed 01 	lds	r25, 0x01ED
 b50:	a0 91 ee 01 	lds	r26, 0x01EE
 b54:	b0 91 ef 01 	lds	r27, 0x01EF
#if defined(TCNT0)
	t = TCNT0;
 b58:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 b5a:	a8 9b       	sbis	0x15, 0	; 21
 b5c:	05 c0       	rjmp	.+10     	; 0xb68 <delay+0x70>
 b5e:	ef 3f       	cpi	r30, 0xFF	; 255
 b60:	19 f0       	breq	.+6      	; 0xb68 <delay+0x70>
		m++;
 b62:	01 96       	adiw	r24, 0x01	; 1
 b64:	a1 1d       	adc	r26, r1
 b66:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 b68:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
 b6a:	ba 2f       	mov	r27, r26
 b6c:	a9 2f       	mov	r26, r25
 b6e:	98 2f       	mov	r25, r24
 b70:	88 27       	eor	r24, r24
 b72:	8e 0f       	add	r24, r30
 b74:	91 1d       	adc	r25, r1
 b76:	a1 1d       	adc	r26, r1
 b78:	b1 1d       	adc	r27, r1
 b7a:	e2 e0       	ldi	r30, 0x02	; 2
 b7c:	88 0f       	add	r24, r24
 b7e:	99 1f       	adc	r25, r25
 b80:	aa 1f       	adc	r26, r26
 b82:	bb 1f       	adc	r27, r27
 b84:	ea 95       	dec	r30
 b86:	d1 f7       	brne	.-12     	; 0xb7c <delay+0x84>
 b88:	86 1b       	sub	r24, r22
 b8a:	97 0b       	sbc	r25, r23
 b8c:	88 5e       	subi	r24, 0xE8	; 232
 b8e:	93 40       	sbci	r25, 0x03	; 3
 b90:	c8 f2       	brcs	.-78     	; 0xb44 <delay+0x4c>
			ms--;
 b92:	21 50       	subi	r18, 0x01	; 1
 b94:	30 40       	sbci	r19, 0x00	; 0
 b96:	40 40       	sbci	r20, 0x00	; 0
 b98:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
 b9a:	68 51       	subi	r22, 0x18	; 24
 b9c:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
 b9e:	21 15       	cp	r18, r1
 ba0:	31 05       	cpc	r19, r1
 ba2:	41 05       	cpc	r20, r1
 ba4:	51 05       	cpc	r21, r1
 ba6:	71 f6       	brne	.-100    	; 0xb44 <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
 ba8:	08 95       	ret

00000baa <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
 baa:	01 97       	sbiw	r24, 0x01	; 1
 bac:	39 f0       	breq	.+14     	; 0xbbc <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
 bae:	88 0f       	add	r24, r24
 bb0:	99 1f       	adc	r25, r25
 bb2:	88 0f       	add	r24, r24
 bb4:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
 bb6:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
 bb8:	01 97       	sbiw	r24, 0x01	; 1
 bba:	f1 f7       	brne	.-4      	; 0xbb8 <delayMicroseconds+0xe>
 bbc:	08 95       	ret

00000bbe <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 bbe:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 bc0:	84 b5       	in	r24, 0x24	; 36
 bc2:	82 60       	ori	r24, 0x02	; 2
 bc4:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 bc6:	84 b5       	in	r24, 0x24	; 36
 bc8:	81 60       	ori	r24, 0x01	; 1
 bca:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 bcc:	85 b5       	in	r24, 0x25	; 37
 bce:	82 60       	ori	r24, 0x02	; 2
 bd0:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 bd2:	85 b5       	in	r24, 0x25	; 37
 bd4:	81 60       	ori	r24, 0x01	; 1
 bd6:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 bd8:	ee e6       	ldi	r30, 0x6E	; 110
 bda:	f0 e0       	ldi	r31, 0x00	; 0
 bdc:	80 81       	ld	r24, Z
 bde:	81 60       	ori	r24, 0x01	; 1
 be0:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 be2:	e1 e8       	ldi	r30, 0x81	; 129
 be4:	f0 e0       	ldi	r31, 0x00	; 0
 be6:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 be8:	80 81       	ld	r24, Z
 bea:	82 60       	ori	r24, 0x02	; 2
 bec:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 bee:	80 81       	ld	r24, Z
 bf0:	81 60       	ori	r24, 0x01	; 1
 bf2:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 bf4:	e0 e8       	ldi	r30, 0x80	; 128
 bf6:	f0 e0       	ldi	r31, 0x00	; 0
 bf8:	80 81       	ld	r24, Z
 bfa:	81 60       	ori	r24, 0x01	; 1
 bfc:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 bfe:	e1 eb       	ldi	r30, 0xB1	; 177
 c00:	f0 e0       	ldi	r31, 0x00	; 0
 c02:	80 81       	ld	r24, Z
 c04:	84 60       	ori	r24, 0x04	; 4
 c06:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 c08:	e0 eb       	ldi	r30, 0xB0	; 176
 c0a:	f0 e0       	ldi	r31, 0x00	; 0
 c0c:	80 81       	ld	r24, Z
 c0e:	81 60       	ori	r24, 0x01	; 1
 c10:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 c12:	ea e7       	ldi	r30, 0x7A	; 122
 c14:	f0 e0       	ldi	r31, 0x00	; 0
 c16:	80 81       	ld	r24, Z
 c18:	84 60       	ori	r24, 0x04	; 4
 c1a:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 c1c:	80 81       	ld	r24, Z
 c1e:	82 60       	ori	r24, 0x02	; 2
 c20:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 c22:	80 81       	ld	r24, Z
 c24:	81 60       	ori	r24, 0x01	; 1
 c26:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 c28:	80 81       	ld	r24, Z
 c2a:	80 68       	ori	r24, 0x80	; 128
 c2c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 c2e:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
 c32:	08 95       	ret

00000c34 <__mulsi3>:
 c34:	62 9f       	mul	r22, r18
 c36:	d0 01       	movw	r26, r0
 c38:	73 9f       	mul	r23, r19
 c3a:	f0 01       	movw	r30, r0
 c3c:	82 9f       	mul	r24, r18
 c3e:	e0 0d       	add	r30, r0
 c40:	f1 1d       	adc	r31, r1
 c42:	64 9f       	mul	r22, r20
 c44:	e0 0d       	add	r30, r0
 c46:	f1 1d       	adc	r31, r1
 c48:	92 9f       	mul	r25, r18
 c4a:	f0 0d       	add	r31, r0
 c4c:	83 9f       	mul	r24, r19
 c4e:	f0 0d       	add	r31, r0
 c50:	74 9f       	mul	r23, r20
 c52:	f0 0d       	add	r31, r0
 c54:	65 9f       	mul	r22, r21
 c56:	f0 0d       	add	r31, r0
 c58:	99 27       	eor	r25, r25
 c5a:	72 9f       	mul	r23, r18
 c5c:	b0 0d       	add	r27, r0
 c5e:	e1 1d       	adc	r30, r1
 c60:	f9 1f       	adc	r31, r25
 c62:	63 9f       	mul	r22, r19
 c64:	b0 0d       	add	r27, r0
 c66:	e1 1d       	adc	r30, r1
 c68:	f9 1f       	adc	r31, r25
 c6a:	bd 01       	movw	r22, r26
 c6c:	cf 01       	movw	r24, r30
 c6e:	11 24       	eor	r1, r1
 c70:	08 95       	ret

00000c72 <__udivmodhi4>:
 c72:	aa 1b       	sub	r26, r26
 c74:	bb 1b       	sub	r27, r27
 c76:	51 e1       	ldi	r21, 0x11	; 17
 c78:	07 c0       	rjmp	.+14     	; 0xc88 <__udivmodhi4_ep>

00000c7a <__udivmodhi4_loop>:
 c7a:	aa 1f       	adc	r26, r26
 c7c:	bb 1f       	adc	r27, r27
 c7e:	a6 17       	cp	r26, r22
 c80:	b7 07       	cpc	r27, r23
 c82:	10 f0       	brcs	.+4      	; 0xc88 <__udivmodhi4_ep>
 c84:	a6 1b       	sub	r26, r22
 c86:	b7 0b       	sbc	r27, r23

00000c88 <__udivmodhi4_ep>:
 c88:	88 1f       	adc	r24, r24
 c8a:	99 1f       	adc	r25, r25
 c8c:	5a 95       	dec	r21
 c8e:	a9 f7       	brne	.-22     	; 0xc7a <__udivmodhi4_loop>
 c90:	80 95       	com	r24
 c92:	90 95       	com	r25
 c94:	bc 01       	movw	r22, r24
 c96:	cd 01       	movw	r24, r26
 c98:	08 95       	ret

00000c9a <__udivmodsi4>:
 c9a:	a1 e2       	ldi	r26, 0x21	; 33
 c9c:	1a 2e       	mov	r1, r26
 c9e:	aa 1b       	sub	r26, r26
 ca0:	bb 1b       	sub	r27, r27
 ca2:	fd 01       	movw	r30, r26
 ca4:	0d c0       	rjmp	.+26     	; 0xcc0 <__udivmodsi4_ep>

00000ca6 <__udivmodsi4_loop>:
 ca6:	aa 1f       	adc	r26, r26
 ca8:	bb 1f       	adc	r27, r27
 caa:	ee 1f       	adc	r30, r30
 cac:	ff 1f       	adc	r31, r31
 cae:	a2 17       	cp	r26, r18
 cb0:	b3 07       	cpc	r27, r19
 cb2:	e4 07       	cpc	r30, r20
 cb4:	f5 07       	cpc	r31, r21
 cb6:	20 f0       	brcs	.+8      	; 0xcc0 <__udivmodsi4_ep>
 cb8:	a2 1b       	sub	r26, r18
 cba:	b3 0b       	sbc	r27, r19
 cbc:	e4 0b       	sbc	r30, r20
 cbe:	f5 0b       	sbc	r31, r21

00000cc0 <__udivmodsi4_ep>:
 cc0:	66 1f       	adc	r22, r22
 cc2:	77 1f       	adc	r23, r23
 cc4:	88 1f       	adc	r24, r24
 cc6:	99 1f       	adc	r25, r25
 cc8:	1a 94       	dec	r1
 cca:	69 f7       	brne	.-38     	; 0xca6 <__udivmodsi4_loop>
 ccc:	60 95       	com	r22
 cce:	70 95       	com	r23
 cd0:	80 95       	com	r24
 cd2:	90 95       	com	r25
 cd4:	9b 01       	movw	r18, r22
 cd6:	ac 01       	movw	r20, r24
 cd8:	bd 01       	movw	r22, r26
 cda:	cf 01       	movw	r24, r30
 cdc:	08 95       	ret

00000cde <__tablejump2__>:
 cde:	ee 0f       	add	r30, r30
 ce0:	ff 1f       	adc	r31, r31

00000ce2 <__tablejump__>:
 ce2:	05 90       	lpm	r0, Z+
 ce4:	f4 91       	lpm	r31, Z+
 ce6:	e0 2d       	mov	r30, r0
 ce8:	09 94       	ijmp

00000cea <_exit>:
 cea:	f8 94       	cli

00000cec <__stop_program>:
 cec:	ff cf       	rjmp	.-2      	; 0xcec <__stop_program>
